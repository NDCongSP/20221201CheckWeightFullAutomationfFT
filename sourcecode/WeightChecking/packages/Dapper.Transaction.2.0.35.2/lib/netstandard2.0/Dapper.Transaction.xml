<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapper.Transaction</name>
    </assembly>
    <members>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Execute(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute on this connection.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Execute(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute a command asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute on this connection.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReader(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="param">The parameters to use for this command.</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReader(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="cnn">The connection to execute on.</param>
            <param name="command">The command to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReader(System.Data.IDbTransaction,Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="cnn">The connection to execute on.</param>
            <param name="command">The command to execute.</param>
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> flags for this reader.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReaderAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="param">The parameters to use for this command.</param> 
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReaderAsync(System.Data.Common.DbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="param">The parameters to use for this command.</param> 
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReaderAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReaderAsync(System.Data.Common.DbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReaderAsync(System.Data.IDbTransaction,Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute.</param>
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> flags for this reader.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteReaderAsync(System.Data.Common.DbTransaction,Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute.</param>
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> flags for this reader.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteScalar(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="param">The parameters to use for this command.</param> 
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>The first cell selected as <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteScalar(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute.</param>
            <returns>The first cell selected as <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteScalarAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="param">The parameters to use for this command.</param> 
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>The first cell returned, as <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteScalarAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute.</param>
            <returns>The first cell selected as <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteScalarAsync``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="transaction">The transaction to execute on.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="param">The parameters to use for this command.</param> 
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>The first cell returned, as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteScalarAsync``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute.</param>
            <returns>The first cell selected as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteScalar``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="transaction">The transaction to execute on.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="param">The parameters to use for this command.</param> 
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>The first cell returned, as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.ExecuteScalar``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="transaction">The transaction to execute on.</param>
            <param name="command">The command to execute.</param>
            <returns>The first cell selected as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query(System.Data.IDbTransaction,System.String,System.Object,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a sequence of dynamic objects with properties matching the columns.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="buffered">Whether to buffer results in memory.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a query asynchronously using Task.
            </summary>
            <param name="cnn">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute a query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync(System.Data.IDbTransaction,System.Type,Dapper.CommandDefinition)">
            <summary>
            Execute a query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>  
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A sequence of data of <typeparamref name="T"/>; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``3(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 2 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``3(System.Data.IDbTransaction,Dapper.CommandDefinition,System.Func{``0,``1,``2},System.String)">
            <summary>
            Perform a asynchronous multi-mapping query with 2 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="command">The command to execute.</param>
            <param name="map">The function to map row types to the return type.</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``4(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 3 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``4(System.Data.IDbTransaction,Dapper.CommandDefinition,System.Func{``0,``1,``2,``3},System.String)">
            <summary>
            Perform a asynchronous multi-mapping query with 3 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="command">The command to execute.</param>
            <param name="map">The function to map row types to the return type.</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``5(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 4 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``5(System.Data.IDbTransaction,Dapper.CommandDefinition,System.Func{``0,``1,``2,``3,``4},System.String)">
            <summary>
            Perform a asynchronous multi-mapping query with 4 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="command">The command to execute.</param>
            <param name="map">The function to map row types to the return type.</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``6(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 5 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``6(System.Data.IDbTransaction,Dapper.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5},System.String)">
            <summary>
            Perform a asynchronous multi-mapping query with 5 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="command">The command to execute.</param>
            <param name="map">The function to map row types to the return type.</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``7(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 6 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TSixth">The sixth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``7(System.Data.IDbTransaction,Dapper.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5,``6},System.String)">
            <summary>
            Perform a asynchronous multi-mapping query with 6 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TSixth">The sixth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="command">The command to execute.</param>
            <param name="map">The function to map row types to the return type.</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``8(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 7 input types. If you need more types -> use Query with Type[] parameter.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TSixth">The sixth type in the recordset.</typeparam>
            <typeparam name="TSeventh">The seventh type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``8(System.Data.IDbTransaction,Dapper.CommandDefinition,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String)">
            <summary>
            Perform an asynchronous multi-mapping query with 7 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TSixth">The sixth type in the recordset.</typeparam>
            <typeparam name="TSeventh">The seventh type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="command">The command to execute.</param>
            <param name="map">The function to map row types to the return type.</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryAsync``1(System.Data.IDbTransaction,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with an arbitrary number of input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="types">Array of types in the recordset.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirst(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirst(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstAsync(System.Data.IDbTransaction,System.Type,Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstAsync(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstAsync``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstAsync``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefault(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefault(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefaultAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefaultAsync(System.Data.IDbTransaction,System.Type,Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefaultAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefaultAsync(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefaultAsync``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefaultAsync``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefault``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirstOrDefault``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirst``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryFirst``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryMultiple(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryMultiple(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command to execute for this query.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryMultipleAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QueryMultipleAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command to execute for this query.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingle(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingle(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleAsync(System.Data.IDbTransaction,System.Type,Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleAsync(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleAsync``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleAsync``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefault(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a dynamic object with properties matching the columns.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefault(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <paramref name="type"/>.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefaultAsync(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <remarks>Note: the row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefaultAsync(System.Data.IDbTransaction,System.Type,Dapper.CommandDefinition)">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="type">The type to return.</param>
            <param name="command">The command used to query on this connection.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefaultAsync(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefaultAsync(System.Data.IDbTransaction,System.Type,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a single-row query asynchronously using Task.
            </summary>
            <param name="transaction">The connection to query on.</param>
            <param name="type">The type to return.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefaultAsync``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefaultAsync``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefault``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingleOrDefault``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingle``1(System.Data.IDbTransaction,System.String,System.Object,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a single-row query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of result to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.QuerySingle``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``1(System.Data.IDbTransaction,System.String,System.Object,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for the query.</param>
            <param name="param">The parameters to pass, if any.</param> 
            <param name="buffered">Whether to buffer results in memory.</param>
            <param name="commandTimeout">The command timeout (in seconds).</param>
            <param name="commandType">The type of command to execute.</param>
            <returns>
            A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``1(System.Data.IDbTransaction,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of results to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="command">The command used to query on this connection.</param>
            <returns>
            A sequence of data of <typeparamref name="T"/>; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``3(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 2 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``4(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 3 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``5(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 4 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``6(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 5 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``7(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 6 input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TSixth">The sixth type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``8(System.Data.IDbTransaction,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with 7 input types. If you need more types -> use Query with Type[] parameter.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TFirst">The first type in the recordset.</typeparam>
            <typeparam name="TSecond">The second type in the recordset.</typeparam>
            <typeparam name="TThird">The third type in the recordset.</typeparam>
            <typeparam name="TFourth">The fourth type in the recordset.</typeparam>
            <typeparam name="TFifth">The fifth type in the recordset.</typeparam>
            <typeparam name="TSixth">The sixth type in the recordset.</typeparam>
            <typeparam name="TSeventh">The seventh type in the recordset.</typeparam>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param> 
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:Dapper.Transaction.DbTransactionExtensions.Query``1(System.Data.IDbTransaction,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi-mapping query with an arbitrary number of input types.
            This returns a single type, combined from the raw types via <paramref name="map"/>.
            </summary>
            <typeparam name="TReturn">The combined type to return.</typeparam>
            <param name="transaction">The transaction to query on.</param>
            <param name="sql">The SQL to execute for this query.</param>
            <param name="types">Array of types in the recordset.</param>
            <param name="map">The function to map row types to the return type.</param>
            <param name="param">The parameters to use for this query.</param>
            <param name="buffered">Whether to buffer the results in memory.</param>
            <param name="splitOn">The field we should split and read the second object from (default: "Id").</param>
            <param name="commandTimeout">Number of seconds before command execution timeout.</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns>An enumerable of <typeparamref name="TReturn"/>.</returns>
        </member>
    </members>
</doc>
